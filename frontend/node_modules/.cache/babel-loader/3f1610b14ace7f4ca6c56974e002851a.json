{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Documents\\\\GitHub\\\\audio-analyzer\\\\frontend\\\\src\\\\components\\\\PlotCard.jsx\";\nimport React from \"react\";\nimport PlotWrapper from \"./PlotWrapper\";\nimport { useRef } from \"react\";\nimport DashboardCard from \"./DashboardCard\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from \"chart.js\";\n\n// Register chart.js modules (necessary in Chart.js v3)\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\"\n    },\n    title: {\n      display: true,\n      text: \"Audio Plot\"\n    }\n  }\n};\nconst blueLineStyle = {\n  borderColor: 'blue',\n  backgroundColor: 'rgba(0, 0, 255, 0.1)',\n  // Light blue fill (optional)\n  pointRadius: 0 // cleaner look for audio plots\n};\nconst enhanceWithStyle = plot => {\n  const styled = {\n    ...plot,\n    datasets: plot.datasets.map(ds => ({\n      ...ds,\n      ...blueLineStyle\n    }))\n  };\n  return styled;\n};\nconst PlotCard = ({\n  frequencyResponseData,\n  timeDomainResponseData,\n  impulseResponseData\n}) => {\n  const freqRef = useRef(null);\n  const timeRef = useRef(null);\n  const impulseRef = useRef(null);\n  if (!frequencyResponseData || !timeDomainResponseData || !impulseResponseData) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\",\n        padding: \"1rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, \"\\uD83C\\uDF00\"), \"Loading plots...\");\n  }\n  const downloadAll = () => {\n    const refs = [{\n      ref: freqRef,\n      name: \"frequency_response.png\"\n    }, {\n      ref: timeRef,\n      name: \"time_domain.png\"\n    }, {\n      ref: impulseRef,\n      name: \"impulse_response.png\"\n    }];\n    refs.forEach(({\n      ref,\n      name\n    }) => {\n      if (ref.current) {\n        const url = ref.current.toBase64Image();\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.download = name;\n        link.click();\n      }\n    });\n  };\n  return /*#__PURE__*/React.createElement(DashboardCard, {\n    title: \"\\uD83D\\uDCC8 Plot Viewer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PlotWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    ref: freqRef,\n    data: enhanceWithStyle(frequencyResponseData),\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(PlotWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    ref: timeRef,\n    data: enhanceWithStyle(timeDomainResponseData),\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(PlotWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    ref: impulseRef,\n    data: enhanceWithStyle(impulseResponseData),\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: downloadAll,\n    style: {\n      marginTop: \"1rem\",\n      backgroundColor: \"hsl(205, 100.00%, 50.00%)\",\n      color: \"white\",\n      padding: \"10px 20px\",\n      borderRadius: \"5px\",\n      border: \"none\",\n      cursor: \"pointer\",\n      margin: \"5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"\\uD83D\\uDCE5 Download All Plots as PNG\"));\n};\nexport default PlotCard;","map":{"version":3,"names":["React","PlotWrapper","useRef","DashboardCard","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","options","responsive","plugins","legend","position","title","display","text","blueLineStyle","borderColor","backgroundColor","pointRadius","enhanceWithStyle","plot","styled","datasets","map","ds","PlotCard","frequencyResponseData","timeDomainResponseData","impulseResponseData","freqRef","timeRef","impulseRef","createElement","style","textAlign","padding","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","downloadAll","refs","ref","name","forEach","current","url","toBase64Image","link","document","href","download","click","data","onClick","marginTop","color","borderRadius","border","cursor","margin"],"sources":["C:/Users/Owner/Documents/GitHub/audio-analyzer/frontend/src/components/PlotCard.jsx"],"sourcesContent":["import React from \"react\";\r\nimport PlotWrapper from \"./PlotWrapper\";\r\nimport { useRef } from \"react\";\r\nimport DashboardCard from \"./DashboardCard\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\n// Register chart.js modules (necessary in Chart.js v3)\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst options = {\r\n  responsive: true,\r\n  plugins: {\r\n    legend: {\r\n      position: \"top\",\r\n    },\r\n    title: {\r\n      display: true,\r\n      text: \"Audio Plot\",\r\n    },\r\n  },\r\n};\r\nconst blueLineStyle = {\r\n  borderColor: 'blue',\r\n  backgroundColor: 'rgba(0, 0, 255, 0.1)', // Light blue fill (optional)\r\n  pointRadius: 0 // cleaner look for audio plots\r\n};\r\n\r\nconst enhanceWithStyle = (plot) => {\r\n  const styled = {\r\n    ...plot,\r\n    datasets: plot.datasets.map(ds => ({\r\n      ...ds,\r\n      ...blueLineStyle,\r\n    }))\r\n  };\r\n  return styled;\r\n};\r\n\r\nconst PlotCard = ({frequencyResponseData, timeDomainResponseData,impulseResponseData}) => {\r\n  const freqRef = useRef(null);\r\n  const timeRef = useRef(null);\r\n  const impulseRef = useRef(null);\r\n  if (!frequencyResponseData || !timeDomainResponseData || !impulseResponseData) {\r\n    return <div style={{ textAlign: \"center\", padding: \"1rem\" }}><>ðŸŒ€</>Loading plots...</div>;\r\n  }\r\n  const downloadAll = () => {\r\n      const refs = [\r\n        { ref: freqRef, name: \"frequency_response.png\" },\r\n        { ref: timeRef, name: \"time_domain.png\" },\r\n        { ref: impulseRef, name: \"impulse_response.png\" }\r\n      ];\r\n\r\n      refs.forEach(({ ref, name }) => {\r\n        if (ref.current) {\r\n          const url = ref.current.toBase64Image();\r\n          const link = document.createElement(\"a\");\r\n          link.href = url;\r\n          link.download = name;\r\n          link.click();\r\n        }\r\n      });\r\n    };\r\n\r\n  return (\r\n    <DashboardCard title=\"ðŸ“ˆ Plot Viewer\">\r\n      <PlotWrapper>\r\n        <Line \r\n          ref = {freqRef} \r\n          data= {enhanceWithStyle(frequencyResponseData)} \r\n          options={options}\r\n        />\r\n      </PlotWrapper>\r\n\r\n      <PlotWrapper>\r\n        <Line\r\n          ref = {timeRef}  \r\n          data={enhanceWithStyle(timeDomainResponseData)} \r\n          options={options} \r\n        />\r\n      </PlotWrapper>\r\n      \r\n      <PlotWrapper>\r\n        <Line\r\n          ref = {impulseRef}  \r\n          data={enhanceWithStyle(impulseResponseData)} \r\n          options={options}\r\n        />\r\n      </PlotWrapper>\r\n      \r\n      <button onClick={downloadAll} style={{ marginTop: \"1rem\", \r\n        backgroundColor: \"hsl(205, 100.00%, 50.00%)\",\r\n        color: \"white\",\r\n        padding: \"10px 20px\",\r\n        borderRadius: \"5px\",\r\n        border: \"none\",\r\n        cursor: \"pointer\",\r\n        margin: \"5px\"}}>\r\n        ðŸ“¥ Download All Plots as PNG\r\n      </button>\r\n    </DashboardCard>\r\n  );\r\n};\r\n\r\nexport default PlotCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}