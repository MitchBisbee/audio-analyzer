{"ast":null,"code":"import axios from \"axios\";\nimport API_BASE from \"./config\";\nexport const uploadAudio = async file => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  const response = await axios.post(`${API_BASE}/upload/`, formData);\n  return response.data;\n};\nexport const applyFilter = async (file, filterType, cutoff, order) => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  formData.append(\"filter_type\", filterType);\n  formData.append(\"cutoff\", cutoff);\n  formData.append(\"order\", order);\n  const response = await axios.post(`${API_BASE}/filter/`, formData);\n  return response.data;\n};\nexport const getWaveformPlot = async file => {\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  const response = await axios.post(`${API_BASE}/plot_waveform/`, formData);\n  return response.data;\n};\nexport const getAudioFile = async fileName => {\n  try {\n    const response = await axios.get(`${API_BASE}/get_audio/?filename=${fileName}`, {\n      responseType: 'blob'\n    });\n    const audioUrl = URL.createObjectURL(response.data);\n    return audioUrl;\n  } catch (error) {\n    console.error(\"Error fetching audio file:\", error);\n  }\n};\nexport const getPlotData = async (file, filterType, cutoff, order) => {\n  try {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"filter_type\", filterType);\n    formData.append(\"cutoff\", cutoff);\n    formData.append(\"order\", order);\n    const response = await axios.post(`${API_BASE}/get_plot_data/`, formData);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["axios","API_BASE","uploadAudio","file","formData","FormData","append","response","post","data","applyFilter","filterType","cutoff","order","getWaveformPlot","getAudioFile","fileName","get","responseType","audioUrl","URL","createObjectURL","error","console","getPlotData","log"],"sources":["C:/Users/Owner/Documents/GitHub/audio-analyzer/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport API_BASE from \"./config\";\r\n\r\nexport const uploadAudio = async (file) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    const response = await axios.post(`${API_BASE}/upload/`, formData);\r\n    return response.data;\r\n};\r\n  \r\nexport const applyFilter = async (file, filterType, cutoff, order) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    formData.append(\"filter_type\", filterType);\r\n    formData.append(\"cutoff\", cutoff);\r\n    formData.append(\"order\", order);\r\n    const response = await axios.post(`${API_BASE}/filter/`, formData);\r\n    return response.data;\r\n};\r\n\r\nexport const getWaveformPlot = async (file) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    const response = await axios.post(`${API_BASE}/plot_waveform/`, formData);\r\n    return response.data;\r\n};\r\n\r\nexport const getAudioFile = async (fileName) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE}/get_audio/?filename=${fileName}`, {\r\n        responseType: 'blob',\r\n      });\r\n      const audioUrl = URL.createObjectURL(response.data);\r\n      return audioUrl;\r\n    } catch (error) {\r\n      console.error(\"Error fetching audio file:\", error);\r\n    }\r\n  };\r\n\r\n\r\nexport const getPlotData = async (file, filterType, cutoff, order) => {\r\n  try{  \r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    formData.append(\"filter_type\", filterType);\r\n    formData.append(\"cutoff\", cutoff);\r\n    formData.append(\"order\", order);\r\n    const response = await axios.post(`${API_BASE}/get_plot_data/`, formData);\r\n    return response.data;\r\n  } catch (error){\r\n    console.log(error);\r\n  }\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,UAAU;AAE/B,OAAO,MAAMC,WAAW,GAAG,MAAOC,IAAI,IAAK;EACvC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAC7B,MAAMI,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,QAAQ,UAAU,EAAEG,QAAQ,CAAC;EAClE,OAAOG,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOP,IAAI,EAAEQ,UAAU,EAAEC,MAAM,EAAEC,KAAK,KAAK;EAClE,MAAMT,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAC7BC,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEK,UAAU,CAAC;EAC1CP,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEM,MAAM,CAAC;EACjCR,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEO,KAAK,CAAC;EAC/B,MAAMN,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,QAAQ,UAAU,EAAEG,QAAQ,CAAC;EAClE,OAAOG,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMK,eAAe,GAAG,MAAOX,IAAI,IAAK;EAC3C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAC7B,MAAMI,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,QAAQ,iBAAiB,EAAEG,QAAQ,CAAC;EACzE,OAAOG,QAAQ,CAACE,IAAI;AACxB,CAAC;AAED,OAAO,MAAMM,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC5C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMP,KAAK,CAACiB,GAAG,CAAC,GAAGhB,QAAQ,wBAAwBe,QAAQ,EAAE,EAAE;MAC9EE,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACd,QAAQ,CAACE,IAAI,CAAC;IACnD,OAAOU,QAAQ;EACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACpD;AACF,CAAC;AAGH,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAOrB,IAAI,EAAEQ,UAAU,EAAEC,MAAM,EAAEC,KAAK,KAAK;EACpE,IAAG;IACD,MAAMT,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;IAC7BC,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEK,UAAU,CAAC;IAC1CP,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEM,MAAM,CAAC;IACjCR,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEO,KAAK,CAAC;IAC/B,MAAMN,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,QAAQ,iBAAiB,EAAEG,QAAQ,CAAC;IACzE,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOa,KAAK,EAAC;IACbC,OAAO,CAACE,GAAG,CAACH,KAAK,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}